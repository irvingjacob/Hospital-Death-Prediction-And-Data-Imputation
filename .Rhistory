# import data, remove MEDV, and load partition functions script
boston <- read.csv("D:/BGSU/Spring_2022/STAT_6440_Data_Mining/Data/BostonHousing.csv")
source("D:/BGSU/Spring_2022/STAT_6440_Data_Mining/myfunctions.R")
# Partition data to 80-20
bost <- subset(boston, select=-c(MEDV))
# CAT.MEDV is a binary response, this will be CLASSIFICATION k-Nearest-Neighbors
# First split into training and testing AND validation sets:
# After performing validation to choose k, I will recombine the validation and training sets to form desired 80-20 partition.
p3 <- partition.3(bost, 0.7, 0.2)
training.data <- p3$data.train
validation.data <- p3$data.val
test.data <- p3$data.test
# Since Euclidean distance is affecting by magnitude, perform scaling on numeric/continuous regressors
# -- This excludes CAT.MEDV (13)
# -- NOTE: CHAS is a binary dummy variable. In the code below it is scaled. If results are strange, may try excluding it from scaling.
training.scaled <- scale(training.data[,-13], center = TRUE, scale = TRUE)
training.scaled.wY <- cbind(training.scaled, training.data[,13])
training.scaled.attr <- attributes(training.scaled)
val.scaled <- scale(validation.data[,-13],
center = training.scaled.attr$`scaled:center`,
scale = training.scaled.attr$`scaled:scale`)
test.scaled <- scale(test.data[,-13],
center = training.scaled.attr$`scaled:center`,
scale = training.scaled.attr$`scaled:scale`)
# Fit kNN model for k values from 1-100 and test with validation data. Report Kappa value and create a plot.
K <- 100
kappa <- rep(0, K)
for (kk in 1:K){
Knn <- knn(train = training.scaled, test = val.scaled,
cl = training.data[,13], k = kk)
c <- confusionMatrix(as.factor(Knn), as.factor(validation.data[,13]),
positive = "yes")
kappa[kk] <- c$overall["Kappa"]
cat("K", kk, "Kappa", kappa[kk], "\n")
}
# Dan Mrachko
# STAT 6440 Data Mining
# Homework 2 - Script
# March 18, 2022
# Libaries
library(FNN)
library(caret)
# import data, remove MEDV, and load partition functions script
boston <- read.csv("D:/BGSU/Spring_2022/STAT_6440_Data_Mining/Data/BostonHousing.csv")
source("D:/BGSU/Spring_2022/STAT_6440_Data_Mining/myfunctions.R")
# Partition data to 80-20
bost <- subset(boston, select=-c(MEDV))
# CAT.MEDV is a binary response, this will be CLASSIFICATION k-Nearest-Neighbors
# First split into training and testing AND validation sets:
# After performing validation to choose k, I will recombine the validation and training sets to form desired 80-20 partition.
p3 <- partition.3(bost, 0.7, 0.2)
training.data <- p3$data.train
validation.data <- p3$data.val
test.data <- p3$data.test
# Since Euclidean distance is affecting by magnitude, perform scaling on numeric/continuous regressors
# -- This excludes CAT.MEDV (13)
# -- NOTE: CHAS is a binary dummy variable. In the code below it is scaled. If results are strange, may try excluding it from scaling.
training.scaled <- scale(training.data[,-13], center = TRUE, scale = TRUE)
training.scaled.wY <- cbind(training.scaled, training.data[,13])
training.scaled.attr <- attributes(training.scaled)
val.scaled <- scale(validation.data[,-13],
center = training.scaled.attr$`scaled:center`,
scale = training.scaled.attr$`scaled:scale`)
test.scaled <- scale(test.data[,-13],
center = training.scaled.attr$`scaled:center`,
scale = training.scaled.attr$`scaled:scale`)
# Fit kNN model for k values from 1-100 and test with validation data. Report Kappa value and create a plot.
K <- 100
kappa <- rep(0, K)
for (kk in 1:K){
Knn <- knn(train = training.scaled, test = val.scaled,
cl = training.data[,13], k = kk)
c <- confusionMatrix(as.factor(Knn), as.factor(validation.data[,13]),
positive = "1")
kappa[kk] <- c$overall["Kappa"]
cat("K", kk, "Kappa", kappa[kk], "\n")
}
warnings()
# Plot of Kappa vs. K
plot(c(1:K), kappa, xlab = "k", ylab = "Kappa", type = "l", col = "blue")
training.data.80 <- rbind(training.data, validation.data)
training.data.scaled.80 <- rbind(training.scaled, val.scaled)
Knn <- knn(train = training.data.scaled.80, test = test.scaled,
cl = training.data.80[,13], k = 5)
# Test the final model using the testing data
confusionMatrix(as.factor(Knn), as.factor(test.data[,13]),
positive = "1")
confusionMatrix(as.factor(Knn), as.factor(test.data[,13]),
positive = 1)
# Test the final model using the testing data
confusionMatrix(as.factor(Knn), as.factor(test.data[,13]),
positive = "1")
klabels <- training.data[Knn.attr$nn.index, 9]
# Dan Mrachko
# STAT 6440 Data Mining
# Homework 2 - Script
# March 18, 2022
# Libaries
library(FNN)
library(caret)
# import data, remove MEDV, and load partition functions script
boston <- read.csv("D:/BGSU/Spring_2022/STAT_6440_Data_Mining/Data/BostonHousing.csv")
source("D:/BGSU/Spring_2022/STAT_6440_Data_Mining/myfunctions.R")
# Partition data to 80-20
bost <- subset(boston, select=-c(MEDV))
# CAT.MEDV is a binary response, this will be CLASSIFICATION k-Nearest-Neighbors
# First split into training and testing AND validation sets:
# After performing validation to choose k, I will recombine the validation and training sets to form desired 80-20 partition.
p3 <- partition.3(bost, 0.7, 0.2)
training.data <- p3$data.train
validation.data <- p3$data.val
test.data <- p3$data.test
# Since Euclidean distance is affecting by magnitude, perform scaling on numeric/continuous regressors
# -- This excludes CAT.MEDV (13)
# -- NOTE: CHAS is a binary dummy variable. In the code below it is scaled. If results are strange, may try excluding it from scaling.
training.scaled <- scale(training.data[,-13], center = TRUE, scale = TRUE)
training.scaled.wY <- cbind(training.scaled, training.data[,13])
training.scaled.attr <- attributes(training.scaled)
val.scaled <- scale(validation.data[,-13], center = training.scaled.attr$`scaled:center`, scale = training.scaled.attr$`scaled:scale`)
test.scaled <- scale(test.data[,-13], center = training.scaled.attr$`scaled:center`, scale = training.scaled.attr$`scaled:scale`)
# Fit kNN model for k values from 1-100 and test with validation data. Report Kappa value and create a plot.
K <- 100
kappa <- rep(0, K)
for (kk in 1:K){
Knn <- knn(train = training.scaled, test = val.scaled,
cl = training.data[,13], k = kk)
c <- confusionMatrix(as.factor(Knn), as.factor(validation.data[,13]), positive = "1")
kappa[kk] <- c$overall["Kappa"]
cat("K", kk, "Kappa", kappa[kk], "\n")
}
# Plot of Kappa vs. K
plot(c(1:K), kappa, xlab = "k", ylab = "Kappa", type = "l", col = "blue")
# From the plot, it appears k = 5 is the best parameter to use.
# Recombine the validation and training data to make training data 80% partition, then retrain the model with k=5.
training.data.80 <- rbind(training.data, validation.data)
training.data.scaled.80 <- rbind(training.scaled, val.scaled)
Knn <- knn(train = training.data.scaled.80, test = test.scaled, cl = training.data.80[,13], k = 5)
# Test the final model using the testing data
confusionMatrix(as.factor(Knn), as.factor(test.data[,13]), positive = "1")
Knn.attr <- attributes(Knn)
k.labels <- training.data[Knn.attr$nn.index, 13]
k.labels
library(TSA)
data(milk)
knitr::opts_chunk$set(echo = TRUE)
library(TSA)
data(milk)
plot(milk, main="Milk Production Jan 1994 - Dec 2005", ylab="Millions of lbs", xlab="Date")
par(mfrow=c(2,1))
plot(milk, main="Milk Production Jan 1994 - Dec 2005", ylab="Millions of lbs", xlab="Date")
plot(y=milk, x=zlag(milk, 12), main="12 Month Lag", ylab="Millions of lbs", xlab="Date")
plot(milk, main="Milk Production Jan 1994 - Dec 2005", ylab="Millions of lbs", xlab="Date")
plot(diff(milk), main="First Difference of Milk Production", ylab="Millions of lbs", xlab="Date")
par(mfrow=c(3,1))
plot(milk, main="Milk Production Jan 1994 - Dec 2005", ylab="Millions of lbs", xlab="Date")
plot(diff(milk), main="First Difference of Milk Production", ylab="Millions of lbs", xlab="Date")
plot(y=diff(milk), x=zlag(diff(milk), 12), main="Zlag-12 of First Difference", ylab="Millions of lbs", xlab="Date")
plot(diff(milk), main="First Difference of Milk Production", ylab="Millions of lbs", xlab="Date")
plot(y=diff(milk), x=zlag(diff(milk), 48), main="Zlag-12 of First Difference", ylab="Millions of lbs", xlab="Date")
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=7)
library(TSA)
data(milk)
dmilk <- diff(milk)
plot(zlag(dmilk, 12), main="lag-12 of d(milk)"
plot(zlag(dmilk, 12), main="lag-12 of d(milk)")
lag12_dmilk <- lag(dmilk, 12)
lag48_dmilk <- lag(dmilk, 48)
lag12_dmilk <- zlag(dmilk, 12)
lag48_dmilk <- zlag(dmilk, 48)
lag12_dmilk <- lag(dmilk, 12)
lag48_dmilk <- lag(dmilk, 48)
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=7)
library(TSA)
data(milk)
hist(rstudent(dmilk))
library(TSA)
data(milk)
par(mfrow=c(2,1))
plot(milk, main="Milk Production Jan 1994 - Dec 2005", ylab="Millions of lbs", xlab="Date")
plot(y=milk, x=zlag(milk, 12), main="12 Month Lag", ylab="Millions of lbs", xlab="Date")
dmilk <- diff(milk)
par(mfrow=c(2,1))
plot(milk, main="Milk Production Jan 1994 - Dec 2005", ylab="Millions of lbs", xlab="Date")
plot(dmilk, main="First Difference of Milk Production", ylab="Millions of lbs", xlab="Date")
# 1. Assess Normality
par(mfrow=c(2,1))
hist(rstudent(dmilk))
hist(dmilk)
# standardize the difference data with the scale function, then generate histogram
std_milk <- scale(dmilk, center=TRUE, scale=TRUE)
hist(dmilk)
hist(std_milk)
qqnorm(std_milk)
qqline(std_milk)
qqnorm(std_milk)
# Shapiro-Wilk test
shapiro.test(std_milk)
# 2. Assess Independence with a runs test
runs(std_milk)
# 3. Sample autocorrelation
acf(std_milk)
set.seed(1)
y_t <- arima.sim(list(order = c(1,0,0), ar=c(0.4)), n=200)
W_t <- exp(y_t)
# plots
par(mfrow=c(2,1))
plot(W_t, ylab=expression(W[t]), xlab="Time", type="o")
acf(W_t, main=cbind(("Sample ACF of "), expression(W[t])))
acf(W_t, main=(("Sample ACF of ") + expression(W[t])))
acf(W_t, main=expression("Sample ACF for " ~ W[t]))
acf(W_t, main=expression("Sample ACF for" ~ W[t]))
plot(W_t, ylab=expression(W[t]), xlab="Time", type="o")
BoxCox.ar(W_t)
W_t_trans <- ln(W_t)
W_t_trans <- log(W_t)
par(mfrow=c(2,1))
plot(W_t_trans, main=expression(ln(W[t])))
acf(W_t_trans, main=expression("Sample ACF for" ~ ln(W[t])))
knitr::opts_chunk$set(echo = TRUE, fig.width=8, fig.height=8, fig.align="center")
library(TSA)
data(milk)
W_t_trans <- log(W_t)
par(mfrow=c(2,1))
#par(mfrow=c(3,1))
plot(W_t_trans, type="o", col="blue")
lines(y_t, type="--", col="red")
#par(mfrow=c(3,1))
plot(W_t_trans, type="o", col="blue")
lines(y_t, type="l", lty=2 col="red")
#par(mfrow=c(3,1))
plot(W_t_trans, type="o", col="blue")
lines(y_t, type="l", lty=2, col="red")
lines(y_t, type="l", lty=2, col="red")
clear
# Dan Mrachko
# STAT 5160 TSA
# Homework 6
library(TSA)
# -----------------------------------------------------------------------------
# Problem 1
# Generate two time series data sets, using set.seed(5),
# each of length n = 1000, including
# (i) an AR(1) with phi = −0.6
# (ii) an MA(1) with theta = 0.8.
#
# For each time series data set:
# 1. plot the sample ACF,
# 2. plot the sample PACF
# 3. generate the extended auto-correlation function (EACF) table.
#
# Are the results based on ACF, PACF and EACF
# consistent with the true model for the time series? Explain your
# reasons.
N = 1000;
# (i)   AR(1), phi    = -0.6
set.seed(5)
AR_1 <- arima.sim(list(order = c(1,0,0), ar=c(-0.6)), n=N)
# (ii)  MA(1), theta  =  0.8
set.seed(5)
MA_1 <- arima.sim(list(order = c(0,0,1), ma=c(-0.8)), n=N)
library(TSA)
library(lubridate)
library(xts)
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
gas_inds <- index(gas)[seq(1, length(index(gas)), 10)]
gas_inds
ymd(gas_inds)
ymd(2009.001)
decimal_date(2009.011)
decimal_date(2009.011)
date<-ymd("2009-01-05")
date
decimal <- decimal_date(date)
decimal
date_decimal(decimal)
date_decimal(decimal, tz="UTC")
date_str <- date_decimal(decimal)
date_str
print(date_str[0:10])
char(date_str)
as.character(date_str)
chars <- as.character(date_str)
chars
chars[0]
chars[1]
all_gas_dec <- index(gas)
all_gas_dec
all_gas_date <- date_decimal(all_gas_dec)
all_gas_date
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=365.25/52)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_date
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=365.25/7)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_date
365/7
364/7
364.25/7
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=364.25/7)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_date
364.25/7
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_date
all_gas_dates <- as.Date(all_gas_date)
all_gas_dates
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_dates <- as.Date(all_gas_date)
gas_inds <- all_gas_dec[seq(1, length(index(gas)), 10)]
gas_labels
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_dates <- as.Date(all_gas_date)
gas_inds <- all_gas_dec[seq(1, length(index(gas)), 10)]
gas_labels <- all_gas_dates[seq(1, length(all_gas_dates), 10)]
gas inds
gas_inds
gas_labels
plot(gas, xaxt = "n")
axis(1, at=gas_inds, labels=gas_labels)
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_dates <- as.Date(all_gas_date)
gas_inds <- all_gas_dec[seq(1, length(index(gas)), 10)]
gas_labels <- all_gas_dates[seq(1, length(all_gas_dates), 10)]
p <- plot(gas, xaxt = "n", xlab="", main="Gas Prices", ylab="Dollars")
p
# plot(gas, xaxt = "n", xlab="", main="Gas Prices", ylab="Dollars")
plot(gas, xlab="", main="Gas Prices", ylab="Dollars")
grid(col = "lightgray", lty = 1, lwd=2)
# load the data
gas <- ts(read.table(file = "gasprices.txt"), start=decimal_date(ymd("2009-01-05")), frequency=52)
all_gas_dec <- index(gas)
all_gas_date <- date_decimal(all_gas_dec)
all_gas_dates <- as.Date(all_gas_date)
all_gas_dates
mdy(all_gas_dates)
all_gas_date
mdy(all_gas_date)
all_gas_dates
all_gas_dates <- as.Date(all_gas_date, format="%b-%d-%y")
all_gas_dates
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
knitr::opts_chunk$set(echo = TRUE)
library(TSA)
library(lubridate)
library(xts)
library(tseries)
# ADF test:
adf.test(gas)
par(mfrow=c(2,1))
plot(diff(gas), ylab="diff(Gas)", xlab="", type="o", main="First Diff of Gas Prices")
all_gas_dec <- index(diff(gas))
all_gas_date <- date_decimal(all_gas_dec)
all_gas_dates <- as.Date(all_gas_date)
gas_inds <- all_gas_dec[seq(1, length(index(diff(gas))), 10)]
gas_labels <- all_gas_dates[seq(1, length(all_gas_dates), 10)]
gas_labels
adf.test(diff(gas))
pacf(diff(gas))
eacf(diff(gas))
(3-11/3)*(4-11/3)
sqrt(((3-11/3)+(4-11/3))^2)*sqrt((4-3)^2)
(3-11/3)*(4-11/3) * 3
setwd("~/stat6440/repo/STAT6440FinalProject")
load("RFResultsWorkspace.RData")
library(caret)
# Load Raw hospital data <- drop all NA values
hosp_na <- read.csv("dataset.csv")
hosp_na$hospital_death <- as.factor(hosp_na$hospital_death)
levels(hosp_na$hospital_death) <- c("0", "1")
hosp_na = subset(hosp_na, select = -c(apache_4a_hospital_death_prob, apache_4a_icu_death_prob))
vals <- unique(hosp_na$ethnicity)
hosp_na$ethnicity <- as.factor(hosp_na$ethnicity)
hosp_na$ethnicity <- ifelse(hosp_na$ethnicity == "Caucasian", 1, hosp_na$ethnicity)
hosp_na$gender <- as.factor(hosp_na$gender)
hosp_na$gender <- ifelse(hosp_na$ethnicity == "M", 0, hosp_na$gender)
hosp_na$gender <- ifelse(hosp_na$ethnicity == "F", 1, hosp_na$gender)
hosp_na$icu_admit_source <- as.factor(hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Accident & Emergency", 0, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Operating Room / Recovery", 1, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Floor", 2, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Other Hospital", 3, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Other ICU", 4, hosp_na$icu_admit_source)
hosp_na$icu_stay_type <- as.factor(hosp_na$icu_stay_type)
hosp_na$icu_stay_type <- ifelse(hosp_na$icu_stay_type == "admit", 0, hosp_na$icu_stay_type)
hosp_na$icu_stay_type <- ifelse(hosp_na$icu_stay_type == "readmit", 1, hosp_na$icu_stay_type)
hosp_na$icu_stay_type <- ifelse(hosp_na$icu_stay_type == "transfer", 2, hosp_na$icu_stay_type)
hosp_na$icu_type <- as.factor(hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "Med-Surg ICU", 0, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "MICU", 1, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "CTICU", 2, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "CCU-CTICU", 3, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "Neuro ICU", 4, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "SICU", 5, hosp_na$icu_type)
hosp_na$apache_3j_bodysystem <- as.factor(hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Cardiovascular", 0, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Metabolic", 1, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Nuerological", 2, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Gastrointestinal", 3, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Metabolic", 4, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Musculoskeletal/Skin", 5, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Respiratory", 6, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Trauma", 7, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Genitourinary", 8, hosp_na$apache_3j_bodysystem)
hosp_na$apache_2_bodysystem <- as.factor(hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Cardiovascular", 0, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Metabolic", 1, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Nuerological", 2, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Gastrointestinal", 3, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Metabolic", 4, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Musculoskeletal/Skin", 5, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Respiratory", 6, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Trauma", 7, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Genitourinary", 8, hosp_na$apache_2_bodysystem)
# Load Raw hospital data then drop all NA values
hosp <- read.csv("dataset.csv")
hosp_na <- hosp
hosp_na$hospital_death <- as.factor(hosp_na$hospital_death)
levels(hosp_na$hospital_death) <- c("0", "1")
hosp_na = subset(hosp_na, select = -c(apache_4a_hospital_death_prob, apache_4a_icu_death_prob, X))
vals <- unique(hosp_na$ethnicity)
hosp_na$ethnicity <- as.factor(hosp_na$ethnicity)
hosp_na$ethnicity <- ifelse(hosp_na$ethnicity == "Caucasian", 1, hosp_na$ethnicity)
hosp_na$gender <- as.factor(hosp_na$gender)
hosp_na$gender <- ifelse(hosp_na$ethnicity == "M", 0, hosp_na$gender)
hosp_na$gender <- ifelse(hosp_na$ethnicity == "F", 1, hosp_na$gender)
hosp_na$icu_admit_source <- as.factor(hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Accident & Emergency", 0, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Operating Room / Recovery", 1, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Floor", 2, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Other Hospital", 3, hosp_na$icu_admit_source)
hosp_na$icu_admit_source <- ifelse(hosp_na$icu_admit_source == "Other ICU", 4, hosp_na$icu_admit_source)
hosp_na$icu_stay_type <- as.factor(hosp_na$icu_stay_type)
hosp_na$icu_stay_type <- ifelse(hosp_na$icu_stay_type == "admit", 0, hosp_na$icu_stay_type)
hosp_na$icu_stay_type <- ifelse(hosp_na$icu_stay_type == "readmit", 1, hosp_na$icu_stay_type)
hosp_na$icu_stay_type <- ifelse(hosp_na$icu_stay_type == "transfer", 2, hosp_na$icu_stay_type)
hosp_na$icu_type <- as.factor(hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "Med-Surg ICU", 0, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "MICU", 1, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "CTICU", 2, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "CCU-CTICU", 3, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "Neuro ICU", 4, hosp_na$icu_type)
hosp_na$icu_type <- ifelse(hosp_na$icu_type == "SICU", 5, hosp_na$icu_type)
hosp_na$apache_3j_bodysystem <- as.factor(hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Cardiovascular", 0, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Metabolic", 1, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Nuerological", 2, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Gastrointestinal", 3, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Metabolic", 4, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Musculoskeletal/Skin", 5, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Respiratory", 6, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Trauma", 7, hosp_na$apache_3j_bodysystem)
hosp_na$apache_3j_bodysystem <- ifelse(hosp_na$apache_3j_bodysystem == "Genitourinary", 8, hosp_na$apache_3j_bodysystem)
hosp_na$apache_2_bodysystem <- as.factor(hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Cardiovascular", 0, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Metabolic", 1, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Nuerological", 2, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Gastrointestinal", 3, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Metabolic", 4, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Musculoskeletal/Skin", 5, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Respiratory", 6, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Trauma", 7, hosp_na$apache_2_bodysystem)
hosp_na$apache_2_bodysystem <- ifelse(hosp_na$apache_2_bodysystem == "Genitourinary", 8, hosp_na$apache_2_bodysystem)
hosp_na <- drop_na(hospital)
library(tidyr)
hosp_na <- drop_na(hospital)
# First do some data munging
hosp_na <- hosp
col(hosp_na)
head(hosp_na)
hosp_na$hospital_death <- as.factor(hosp_na$hospital_death)
levels(hosp_na$hospital_death) <- c("0", "1")
hosp_na = subset(hosp_na, select = -c(apache_4a_hospital_death_prob, apache_4a_icu_death_prob, X))
head(hosp_na)
head(hospital)
hosp_na = subset(hosp_na, select = -c(encounter_id, patient_id, apache_4a_hospital_death_prob, apache_4a_icu_death_prob, X))
# First do some data munging
hosp_na <- hosp
hosp_na$hospital_death <- as.factor(hosp_na$hospital_death)
levels(hosp_na$hospital_death) <- c("0", "1")
hosp_na = subset(hosp_na, select = -c(encounter_id, patient_id, apache_4a_hospital_death_prob, apache_4a_icu_death_prob, X))
h = list("a", "b", "a", "a", "a", "b", "a")
h
g <- as.factor(h)
h = c("a", "b", "a", "a", "a", "b", "a")
g <- as.factor(h)
g
mean(g)
mode(g)
help(mod)
help(mode)
