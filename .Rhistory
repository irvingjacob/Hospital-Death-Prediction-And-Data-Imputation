mice.test$hospital_death[1] == 0
mice.test.temp <- ifelse(mice.test$hospital_death == 1, 1, 0)
mice.test.temp[1:10]
lasso_pred_temp <- ifelse(LASSO_MICE_PRED[,2] > lasso_mice_cutoffs$best_kappa[1], 1, 0)
lasso_pred_temp
lasso_pred_temp[1:10]
roc_LASSO_MICE <- roc(mice.test.temp, lasso_pred_temp)
plot.roc(roc_LASSO_MICE, MAIN = "LASSO MICE ROC")
plot.roc(roc_LASSO_MICE, main = "LASSO MICE ROC")
plot.roc(roc_LASSO_MICE, main = "Lasso Regression (MICE data) ROC")
drop.test.temp <- ifelse(drop.test$hospital_death == 1, 1, 0)
mm.test.temp <- ifelse(mm.test$hospital_death == 1, 1, 0)
lasso_pred_temp <- ifelse(LASSO_DROP_PRED[,2] > lasso_drop_cutoffs$best_kappa[1], 1, 0)
lasso_pred_temp <- ifelse(LASSO_DROP_PRED[,2] > lasso_drop_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_DROP <- roc(drop.test.temp, lasso_pred_temp)
plot.roc(roc_LASSO_DROP, main = "Lasso Regression (DROP data set) ROC")
lasso_pred_temp <- ifelse(LASSO_MM_PRED[,2] > lasso_mm_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_MM <- roc(mm.test.temp, lasso_pred_temp)
plot.roc(roc_LASSO_MM, main = "Lasso Regression (Mean-Mode data set) ROC")
CT_MICE_PRED[0:10]
CT_MICE_PRED
# Classification Tree Curves
ct_pred_temp <- ifelse(CT_MICE_PRED == 1, 1, 0)
roc_CT_MICE <- roc(mice.test.temp, ct_pred_temp)
# Make confusion matrices with the best cutoff values
ct_pred_temp <- ifelse(CT_MICE_PROB[,2] > ct_mice_cutoffs$best_kappa[1], "1", "0")
ct_mice_summary <- as.data.frame(ct_mice_cutoffs$best_kappa)
ct_mice_summary <- cbind(ct_mice_summary, ct_mice_cutoffs$best_acc)
colnames(ct_mice_summary) <- c("Max Kappa", "Max Accuracy")
# Compute Optimal Cut-off values for the Classification Tree Models
ct_mice_cutoffs <- cutoff_opt(mice.test, CT_MICE_PROB, pos_val = "1")
# Compute Optimal Cut-off values for the Classification Tree Models
ct_mice_cutoffs <- cutoff_opt(mice.test, CT_MICE_PROB, pos_val = "1")
ct_drop_cutoffs <- cutoff_opt(drop.test, CT_DROP_PROB, pos_val = "1")
ct_mm_cutoffs <- cutoff_opt(mm.test, CT_MM_PROB, pos_val = "1")
ct_mice_summary <- as.data.frame(ct_mice_cutoffs$best_kappa)
ct_mice_summary <- cbind(ct_mice_summary, ct_mice_cutoffs$best_acc)
colnames(ct_mice_summary) <- c("Max Kappa", "Max Accuracy")
ct_drop_summary <- as.data.frame(ct_drop_cutoffs$best_kappa)
ct_drop_summary <- cbind(ct_drop_summary, ct_drop_cutoffs$best_acc)
colnames(ct_drop_summary) <- c("Max Kappa", "Max Accuracy")
ct_mm_summary <- as.data.frame(ct_mm_cutoffs$best_kappa)
ct_mm_summary <- cbind(ct_mm_summary, ct_mm_cutoffs$best_acc)
colnames(ct_mm_summary) <- c("Max Kappa", "Max Accuracy")
# Make confusion matrices with the best cutoff values
ct_pred_temp <- ifelse(CT_MICE_PROB[,2] > ct_mice_cutoffs$best_kappa[1], "1", "0")
ct_mice_conf <- confusionMatrix(as.factor(ct_pred_temp), as.factor(mice.test$hospital_death), positive = "1")
ct_pred_temp <- ifelse(CT_DROP_PROB[,2] > ct_drop_cutoffs$best_kappa[1], "1", "0")
ct_drop_conf <- confusionMatrix(as.factor(ct_pred_temp), as.factor(drop.test$hospital_death), positive = "1")
ct_pred_temp <- ifelse(CT_MM_PROB[,2] > ct_mm_cutoffs$best_kappa[1], "1", "0")
ct_mm_conf <- confusionMatrix(as.factor(ct_pred_temp), as.factor(mm.test$hospital_death), positive = "1")
ct_mice_conf
ct_mice_conf$positive
ct_mice_conf$overall
ct_mice_conf$table
ct_mice_conf$table[1]
ct_mice_conf$table[2]
# Classification Tree Curves
ct_pred_temp <- ifelse(CT_MICE_PROB[,2] > ct_mice_cutoffs$best_kappa[1], 1, 0)
roc_CT_MICE <- roc(mice.test.temp, ct_pred_temp)
plot.roc(roc_CT_MICE, main = "Classification Tree (MICE data set) ROC")
ct_pred_temp <- ifelse(CT_DROP_PROB[,2] > ct_drop_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_DROP <- roc(drop.test.temp, ct_pred_temp)
plot.roc(roc_CT_DROP, main = "Classification Tree (DROP data set) ROC")
ct_pred_temp <- ifelse(CT_DROP_PROB[,2] > ct_drop_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_DROP <- roc(drop.test.temp, ct_pred_temp)
plot.roc(roc_CT_DROP, main = "Classification Tree (DROP data set) ROC")
roc_CT_DROP <- roc(drop.test.temp, ct_pred_temp)
plot.roc(roc_CT_DROP, main = "Classification Tree (DROP data set) ROC")
ct_pred_temp <- ifelse(CT_MM_PROB[,2] > ct_mm_cutoffs$best_kappa[1], 1, 0)
roc_CT_MM <- roc(mm.test.temp, ct_pred_temp)
plot.roc(roc_CT_MM, main = "Classification Tree (Mean-Mode data set) ROC")
roc_CT_MM$sensitivities
roc_CT_MM$specificities
# Random Forest Tree Curves
rf_pred_temp <- ifelse(RF_MICE_PRED[,2] > rf_mice_cutoffs$best_kappa[1], 1, 0)
roc_RF_MICE <- roc(mice.test.temp, rf_pred_temp)
plot.roc(roc_RF_MICE, main = "Random Forest Tree (MICE data set) ROC")
rf_pred_temp <- ifelse(RF_DROP_PRED[,2] > rf_drop_cutoffs$best_kappa[1], 1, 0)
roc_RF_DROP <- roc(drop.test.temp, rf_pred_temp)
plot.roc(roc_RF_DROP, main = "Random Forest Tree (DROP data set) ROC")
rf_pred_temp <- ifelse(RF_MM_PRED[,2] > rf_mm_cutoffs$best_kappa[1], 1, 0)
roc_RF_MM <- roc(mm.test.temp, rf_pred_temp)
plot.roc(roc_RF_MM, main = "Random Forest Tree (Mean-Mode data set) ROC")
# Plot ROC curves for each type together for comparison
plot.roc(roc_CT_MICE, main = "MICE Data Set ROC", col="navy")
lines(x=roc_LASSO_MICE$specificities, y=roc_LASSO_MICE$sensitivities, lty=2, lwd = 2, col="red")
lines(x=roc_RF_MICE$specificities, y=roc_RF_MICE$sensitivities, lty=2, lwd=2, col="green")
legend(x = "bottomright", legend = c("Class Tree", "Lasso Regression", "Random Forest Tree"), lty = c(1,2,2), lwd = c(2,2,2), col = c("navy", "red", "green"), cex = 0.9)
rf_drop_cutoffs$best_kappa
rf_mice_conf
rf_mm_conf
help(data.frame)
ct_mice_conf$table[1]
g <- ct_mice_conf$table[1]
as.int(g)
as.integer(g)
g <- as.integer(g)
g
h <- as.integer(g)
# Print out all of the confusion matrix tables
#CLASSIFICATION TREE: MICE IMPUTED DATA
ct_mice_conf$table
#CLASSIFICATION TREE: NA DROPPED DATA
ct_drop_conf$table
#CLASSIFICATION TREE: MEAN-MODE IMPUTED DATA
ct_mm_conf$table
#LASSO REGRESSION: MICE IMPUTED DATA
lasso_mice_conf$table
#LASSO REGRESSION: NA DROPPED DATA
lasso_drop_conf$table
#LASSO REGRESSION: MEAN-MODE IMPUTED DATA
lasso_mm_conf$table
#RANDOM FOREST TREE: MICE IMPUTED DATA
rf_mice_conf$table
#RANDOM FOREST TREE: NA DROPPED DATA
rf_drop_conf$table
#RANDOM FOREST TREE: MEAN-MODE IMPUTED DATA
rf_mm_conf$table
# Generate a data.frame of these tabular values for summary/analysis
tns <- list(ct_mice_conf$table[1],
ct_drop_conf$table[1],
ct_mm_conf$table[1],
lasso_mice_conf$table[1],
lasso_drop_conf$table[1],
lasso_mm_conf$table[1],
rf_mice_conf$table[1],
rf_drop_conf$table[1],
rf_mm_conf$table[1])
tps <- list(ct_mice_conf$table[4],
ct_drop_conf$table[4],
ct_mm_conf$table[4],
lasso_mice_conf$table[4],
lasso_drop_conf$table[4],
lasso_mm_conf$table[4],
rf_mice_conf$table[4],
rf_drop_conf$table[4],
rf_mm_conf$table[4])
fns <- list(ct_mice_conf$table[3],
ct_drop_conf$table[3],
ct_mm_conf$table[3],
lasso_mice_conf$table[3],
lasso_drop_conf$table[3],
lasso_mm_conf$table[3],
rf_mice_conf$table[3],
rf_drop_conf$table[3],
rf_mm_conf$table[3])
fps <- list(ct_mice_conf$table[2],
ct_drop_conf$table[2],
ct_mm_conf$table[2],
lasso_mice_conf$table[2],
lasso_drop_conf$table[2],
lasso_mm_conf$table[2],
rf_mice_conf$table[2],
rf_drop_conf$table[2],
rf_mm_conf$table[2])
models <- list("ClassTree",
"ClassTree",
"ClassTree",
"LassoRegres",
"LassoRegres",
"LassoRegres",
"RandomForest",
"RandomForest",
"RandomForest")
imputes <- list("MICE",
"NADropped",
"MeanMode",
"MICE",
"NADropped",
"MeanMode",
"MICE",
"NADropped",
"MeanMode")
results_table <- data.frame(TruePositive = tps, TrueNegative = tns,
FalsePositive = fps, FalseNegative = fns,
Model = models, Imputation = imputes)
head(results_table, 1:5)
head(results_table, 5)
head(results_table, 1)
head(results_table, 1)
results_table <- data.frame(TruePositive = unlist(tps),
TrueNegative = unlist(tns),
FalsePositive = unlist(fps),
FalseNegative = unlist(fns),
Model = unlist(models),
Imputation = unlist(imputes))
head(results_table)
# Print out all of the confusion matrix tables
#CLASSIFICATION TREE: MICE IMPUTED DATA
ct_mice_conf$table
#CLASSIFICATION TREE: NA DROPPED DATA
ct_drop_conf$table
#LASSO REGRESSION: MICE IMPUTED DATA
lasso_mice_conf$table
#LASSO REGRESSION: NA DROPPED DATA
lasso_drop_conf$table
#RANDOM FOREST TREE: MICE IMPUTED DATA
rf_mice_conf$table
#RANDOM FOREST TREE: NA DROPPED DATA
rf_drop_conf$table
hosp_drop <- hosp_munge(hosp)
length(hosp_drop[,1])
hosp_drop <- drop_na(hospital)
length(hosp_drop[,1])
setwd("~/R/stat6440/Hospital-Death-Prediction-And-Data-Imputation")
load("RFResultsWorkspace.RData")
source("data_munge_funcs.R")
library(caret)
library(rpart)
library(rpart.plot)
library(glmnet)
library(tidyr)
RNGkind(sample.kind = "Rounding")
hosp_drop <- hosp_munge(hosp)
hosp_drop <- drop_na(hosp_na)
# Data Partitioning
set.seed(0)
p_drop <- partition.2(hosp_drop, 0.7)
drop.test <- p_drop$data.test
drop.train <- p_drop$data.train
tC <- trainControl(method = "cv", number = 10)
# CT_DROP
set.seed(0)
CT_DROP <- train(hospital_death ~., data = drop.train, method = "rpart",
trControl = tC, tuneLength = 10, metric = "Kappa")
CT_DROP_PRED <- predict(CT_DROP$finalModel, drop.test, type='class')
CT_DROP_PROB <- predict(CT_DROP$finalModel, drop.test, type='prob')
# LASSO_DROP
set.seed(0)
LASSO_DROP <- train(hospital_death ~., data = drop.train, method = "glmnet",
metric = "Kappa", family = "binomial", trControl = tC,
tuneGrid = expand.grid(
alpha = 1, lambda = seq(0.001, 0.1, by = 0.001)))
LASSO_DROP_PRED <- predict(LASSO_DROP, s = LASSO_DROP$bestTune, drop.test,
type = "prob")
# RF_DROP
set.seed(0)
RF_DROP <- train(hospital_death ~., data = drop.train, method = "rf",
ntree = 100, trControl = tC, tuneGrid = tG)
RF_DROP_PRED <- predict(RF_DROP, drop.test, type='prob')
# save new results for dropped data
save(hosp_drop, p_drop, drop.test, drop.train, CT_DROP, CD_DROP_PRED,
CD_DROP_PROB, LASSO_DROP, LASSO_DROP_PRED, RF_DROP, RF_DROP_PRED,
file = "NEW_drop_data.RData")
source("drop_na_fix_code.R")
source("drop_na_fix_code.R")
source("drop_na_fix_code.R")
# save new results for dropped data
save(hosp_drop, p_drop, drop.test, drop.train, CT_DROP, CT_DROP_PRED,
CT_DROP_PROB, LASSO_DROP, LASSO_DROP_PRED, RF_DROP, RF_DROP_PRED,
file = "NEW_drop_data.RData")
CT_DROP
CT_DROP_PROB
34115/91713
knitr::opts_chunk$set(echo = TRUE)
source("data_munge_funcs.R")
library(caret)
library(rpart)
library(rpart.plot)
library(glmnet)
library(tidyr)
library(pROC)
RNGkind(sample.kind = "Rounding")
load("6modelResults.RData")
#load("baggedModels.RData")
load("RFModels.RData")
load("RFPredictions.RData")
load("NEW_drop_data.RData")
rf_mice_cutoffs <- cutoff_opt(mice.test, RF_MICE_PRED, pos_val = "1")
rf_drop_cutoffs <- cutoff_opt(drop.test, RF_DROP_PRED, pos_val = "1")
rf_mm_cutoffs <- cutoff_opt(mm.test, RF_MM_PRED, pos_val = "1")
# Save a summary of the results
rf_mice_summary <- as.data.frame(rf_mice_cutoffs$best_kappa)
rf_mice_summary <- cbind(rf_mice_summary, rf_mice_cutoffs$best_acc)
colnames(rf_mice_summary) <- c("At Max Kappa", "At Max Accuracy")
rf_drop_summary <- as.data.frame(rf_drop_cutoffs$best_kappa)
rf_drop_summary <- cbind(rf_drop_summary, rf_drop_cutoffs$best_acc)
colnames(rf_drop_summary) <- c("At Max Kappa", "At Max Accuracy")
rf_mm_summary <- as.data.frame(rf_mm_cutoffs$best_kappa)
rf_mm_summary <- cbind(rf_mm_summary, rf_mm_cutoffs$best_acc)
colnames(rf_mm_summary) <- c("At Max Kappa", "At Max Accuracy")
rf_mice_summary$`At Max Kappa`
rf_mice_cutoffs$best_kappa
source("data_munge_funcs.R")
library(caret)
library(rpart)
library(rpart.plot)
library(glmnet)
library(tidyr)
library(pROC)
RNGkind(sample.kind = "Rounding")
load("6modelResults.RData")
#load("baggedModels.RData")
load("RFModels.RData")
load("RFPredictions.RData")
load("NEW_drop_data.RData")
lasso_mice_cutoffs <- cutoff_opt(mice.test, LASSO_MICE_PRED, pos_val = "1")
lasso_drop_cutoffs <- cutoff_opt(drop.test, LASSO_DROP_PRED, pos_val = "1")
lasso_mm_cutoffs <- cutoff_opt(mm.test, LASSO_MM_PRED, pos_val = "1")
lasso_mice_summary <- as.data.frame(lasso_mice_cutoffs$best_kappa)
lasso_mice_summary <- cbind(lasso_mice_summary, lasso_mice_cutoffs$best_acc)
colnames(lasso_mice_summary) <- c("Max Kappa", "Max Accuracy")
lasso_drop_summary <- as.data.frame(lasso_drop_cutoffs$best_kappa)
lasso_drop_summary <- cbind(lasso_drop_summary, lasso_drop_cutoffs$best_acc)
colnames(lasso_drop_summary) <- c("Max Kappa", "Max Accuracy")
lasso_mm_summary <- as.data.frame(lasso_mm_cutoffs$best_kappa)
lasso_mm_summary <- cbind(lasso_mm_summary, lasso_mm_cutoffs$best_acc)
colnames(lasso_mm_summary) <- c("Max Kappa", "Max Accuracy")
lasso_pred_temp <- ifelse(LASSO_MICE_PRED[,2] > lasso_mice_cutoffs$best_kappa[1], "1", "0")
lasso_mice_conf <- confusionMatrix(as.factor(lasso_pred_temp), as.factor(mice.test$hospital_death), positive = "1")
lasso_pred_temp <- ifelse(LASSO_DROP_PRED[,2] > lasso_drop_cutoffs$best_kappa[1], "1", "0")
lasso_drop_conf <- confusionMatrix(as.factor(lasso_pred_temp), as.factor(drop.test$hospital_death), positive = "1")
lasso_pred_temp <- ifelse(LASSO_MM_PRED[,2] > lasso_mm_cutoffs$best_kappa[1], "1", "0")
lasso_mm_conf <- confusionMatrix(as.factor(lasso_pred_temp), as.factor(mm.test$hospital_death), positive = "1")
lasso_mice_summary
lasso_drop_summary
lasso_mm_summary
lasso_mice_conf
lasso_drop_conf
lasso_mm_conf
coef(LASSO_MICE$finalModel, LASSO_MICE$bestTune$lambda)
coef(LASSO_DROP$finalModel, LASSO_DROP$bestTune$lambda)
coef(LASSO_MM$finalModel, LASSO_MM$bestTune$lambda)
ct_mice_cutoffs <- cutoff_opt(mice.test, CT_MICE_PROB, pos_val = "1")
ct_drop_cutoffs <- cutoff_opt(drop.test, CT_DROP_PROB, pos_val = "1")
ct_mm_cutoffs <- cutoff_opt(mm.test, CT_MM_PROB, pos_val = "1")
ct_mice_summary <- as.data.frame(ct_mice_cutoffs$best_kappa)
ct_mice_summary <- cbind(ct_mice_summary, ct_mice_cutoffs$best_acc)
colnames(ct_mice_summary) <- c("Max Kappa", "Max Accuracy")
ct_drop_summary <- as.data.frame(ct_drop_cutoffs$best_kappa)
ct_drop_summary <- cbind(ct_drop_summary, ct_drop_cutoffs$best_acc)
colnames(ct_drop_summary) <- c("Max Kappa", "Max Accuracy")
ct_mm_summary <- as.data.frame(ct_mm_cutoffs$best_kappa)
ct_mm_summary <- cbind(ct_mm_summary, ct_mm_cutoffs$best_acc)
colnames(ct_mm_summary) <- c("Max Kappa", "Max Accuracy")
ct_pred_temp <- ifelse(CT_MICE_PROB[,2] > ct_mice_cutoffs$best_kappa[1], "1", "0")
ct_mice_conf <- confusionMatrix(as.factor(ct_pred_temp), as.factor(mice.test$hospital_death), positive = "1")
ct_pred_temp <- ifelse(CT_DROP_PROB[,2] > ct_drop_cutoffs$best_kappa[1], "1", "0")
ct_drop_conf <- confusionMatrix(as.factor(ct_pred_temp), as.factor(drop.test$hospital_death), positive = "1")
ct_pred_temp <- ifelse(CT_MM_PROB[,2] > ct_mm_cutoffs$best_kappa[1], "1", "0")
ct_mm_conf <- confusionMatrix(as.factor(ct_pred_temp), as.factor(mm.test$hospital_death), positive = "1")
ct_mice_summary
ct_drop_summary
ct_mm_summary
ct_mice_conf
ct_drop_conf
ct_mm_conf
rf_mice_cutoffs <- cutoff_opt(mice.test, RF_MICE_PRED, pos_val = "1")
rf_drop_cutoffs <- cutoff_opt(drop.test, RF_DROP_PRED, pos_val = "1")
rf_mm_cutoffs <- cutoff_opt(mm.test, RF_MM_PRED, pos_val = "1")
# Save a summary of the results
rf_mice_summary <- as.data.frame(rf_mice_cutoffs$best_kappa)
rf_mice_summary <- cbind(rf_mice_summary, rf_mice_cutoffs$best_acc)
colnames(rf_mice_summary) <- c("At Max Kappa", "At Max Accuracy")
rf_drop_summary <- as.data.frame(rf_drop_cutoffs$best_kappa)
rf_drop_summary <- cbind(rf_drop_summary, rf_drop_cutoffs$best_acc)
colnames(rf_drop_summary) <- c("At Max Kappa", "At Max Accuracy")
rf_mm_summary <- as.data.frame(rf_mm_cutoffs$best_kappa)
rf_mm_summary <- cbind(rf_mm_summary, rf_mm_cutoffs$best_acc)
colnames(rf_mm_summary) <- c("At Max Kappa", "At Max Accuracy")
rf_pred_temp <- ifelse(RF_MICE_PRED[,2] > rf_mice_cutoffs$best_kappa[1], "1", "0")
rf_mice_conf <- confusionMatrix(as.factor(rf_pred_temp), as.factor(mice.test$hospital_death), positive = "1")
rf_pred_temp <- ifelse(RF_DROP_PRED[,2] > rf_drop_cutoffs$best_kappa[1], "1", "0")
rf_drop_conf <- confusionMatrix(as.factor(rf_pred_temp), as.factor(drop.test$hospital_death), positive = "1")
rf_pred_temp <- ifelse(RF_MM_PRED[,2] > rf_mm_cutoffs$best_kappa[1], "1", "0")
rf_mm_conf <- confusionMatrix(as.factor(rf_pred_temp), as.factor(mm.test$hospital_death), positive = "1")
rf_mice_summary
rf_drop_summary
rf_mm_summary
rf_mice_conf
rf_drop_conf
rf_mm_conf
mice.test.temp <- ifelse(mice.test$hospital_death == 1, 1, 0)
drop.test.temp <- ifelse(drop.test$hospital_death == 1, 1, 0)
mm.test.temp <- ifelse(mm.test$hospital_death == 1, 1, 0)
# Lasso Curves
lasso_pred_temp <- ifelse(LASSO_MICE_PRED[,2] > lasso_mice_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_MICE <- roc(mice.test.temp, lasso_pred_temp)
#plot.roc(roc_LASSO_MICE, main = "Lasso Regression (MICE data set) ROC")
lasso_pred_temp <- ifelse(LASSO_DROP_PRED[,2] > lasso_drop_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_DROP <- roc(drop.test.temp, lasso_pred_temp)
#plot.roc(roc_LASSO_DROP, main = "Lasso Regression (DROP data set) ROC")
lasso_pred_temp <- ifelse(LASSO_MM_PRED[,2] > lasso_mm_cutoffs$best_kappa[1], 1, 0)
roc_LASSO_MM <- roc(mm.test.temp, lasso_pred_temp)
#plot.roc(roc_LASSO_MM, main = "Lasso Regression (Mean-Mode data set) ROC")
# Classification Tree Curves
ct_pred_temp <- ifelse(CT_MICE_PROB[,2] > ct_mice_cutoffs$best_kappa[1], 1, 0)
roc_CT_MICE <- roc(mice.test.temp, ct_pred_temp)
#plot.roc(roc_CT_MICE, main = "Classification Tree (MICE data set) ROC")
ct_pred_temp <- ifelse(CT_DROP_PROB[,2] > ct_drop_cutoffs$best_kappa[1], 1, 0)
roc_CT_DROP <- roc(drop.test.temp, ct_pred_temp)
#plot.roc(roc_CT_DROP, main = "Classification Tree (DROP data set) ROC")
ct_pred_temp <- ifelse(CT_MM_PROB[,2] > ct_mm_cutoffs$best_kappa[1], 1, 0)
roc_CT_MM <- roc(mm.test.temp, ct_pred_temp)
#plot.roc(roc_CT_MM, main = "Classification Tree (Mean-Mode data set) ROC")
# Random Forest Tree Curves
rf_pred_temp <- ifelse(RF_MICE_PRED[,2] > rf_mice_cutoffs$best_kappa[1], 1, 0)
roc_RF_MICE <- roc(mice.test.temp, rf_pred_temp)
#plot.roc(roc_RF_MICE, main = "Random Forest Tree (MICE data set) ROC")
rf_pred_temp <- ifelse(RF_DROP_PRED[,2] > rf_drop_cutoffs$best_kappa[1], 1, 0)
roc_RF_DROP <- roc(drop.test.temp, rf_pred_temp)
#plot.roc(roc_RF_DROP, main = "Random Forest Tree (DROP data set) ROC")
rf_pred_temp <- ifelse(RF_MM_PRED[,2] > rf_mm_cutoffs$best_kappa[1], 1, 0)
roc_RF_MM <- roc(mm.test.temp, rf_pred_temp)
#plot.roc(roc_RF_MM, main = "Random Forest Tree (Mean-Mode data set) ROC")
# Generate a data.frame of these tabular values for summary/analysis
tns <- list(ct_mice_conf$table[1]/sum(ct_mice_conf$table),
ct_drop_conf$table[1]/sum(ct_drop_conf$table),
ct_mm_conf$table[1]/sum(ct_mm_conf$table),
lasso_mice_conf$table[1]/sum(lasso_mice_conf$table),
lasso_drop_conf$table[1]/sum(lasso_drop_conf$table),
lasso_mm_conf$table[1]/sum(lasso_mm_conf$table),
rf_mice_conf$table[1]/sum(rf_mice_conf$table),
rf_drop_conf$table[1]/sum(rf_drop_conf$table),
rf_mm_conf$table[1]/sum(rf_mm_conf$table))
tps <- list(ct_mice_conf$table[4]/sum(ct_mice_conf$table),
ct_drop_conf$table[4]/sum(ct_drop_conf$table),
ct_mm_conf$table[4]/sum(ct_mm_conf$table),
lasso_mice_conf$table[4]/sum(lasso_mice_conf$table),
lasso_drop_conf$table[4]/sum(lasso_drop_conf$table),
lasso_mm_conf$table[4]/sum(lasso_mm_conf$table),
rf_mice_conf$table[4]/sum(rf_mice_conf$table),
rf_drop_conf$table[4]/sum(rf_drop_conf$table),
rf_mm_conf$table[4]/sum(rf_mm_conf$table))
fns <- list(ct_mice_conf$table[3]/sum(ct_mice_conf$table),
ct_drop_conf$table[3]/sum(ct_drop_conf$table),
ct_mm_conf$table[3]/sum(ct_mm_conf$table),
lasso_mice_conf$table[3]/sum(lasso_mice_conf$table),
lasso_drop_conf$table[3]/sum(lasso_drop_conf$table),
lasso_mm_conf$table[3]/sum(lasso_mm_conf$table),
rf_mice_conf$table[3]/sum(rf_mice_conf$table),
rf_drop_conf$table[3]/sum(rf_drop_conf$table),
rf_mm_conf$table[3]/sum(rf_mm_conf$table))
fps <- list(ct_mice_conf$table[2]/sum(ct_mice_conf$table),
ct_drop_conf$table[2]/sum(ct_drop_conf$table),
ct_mm_conf$table[2]/sum(ct_mm_conf$table),
lasso_mice_conf$table[2]/sum(lasso_mice_conf$table),
lasso_drop_conf$table[2]/sum(lasso_drop_conf$table),
lasso_mm_conf$table[2]/sum(lasso_mm_conf$table),
rf_mice_conf$table[2]/sum(rf_mice_conf$table),
rf_drop_conf$table[2]/sum(rf_drop_conf$table),
rf_mm_conf$table[2]/sum(rf_mm_conf$table))
cutoffs <- list(ct_mice_cutoffs$best_kappa[1],
ct_drop_cutoffs$best_kappa[1],
ct_mm_cutoffs$best_kappa[1],
lasso_mice_cutoffs$best_kappa[1],
lasso_drop_cutoffs$best_kappa[1],
lasso_mm_cutoffs$best_kappa[1],
rf_mice_cutoffs$best_kappa[1],
rf_drop_cutoffs$best_kappa[1],
rf_mm_cutoffs$best_kappa[1])
kappas <- list(ct_mice_cutoffs$best_kappa[3],
ct_drop_cutoffs$best_kappa[3],
ct_mm_cutoffs$best_kappa[3],
lasso_mice_cutoffs$best_kappa[3],
lasso_drop_cutoffs$best_kappa[3],
lasso_mm_cutoffs$best_kappa[3],
rf_mice_cutoffs$best_kappa[3],
rf_drop_cutoffs$best_kappa[3],
rf_mm_cutoffs$best_kappa[3])
accs <- list(ct_mice_cutoffs$best_kappa[2],
ct_drop_cutoffs$best_kappa[2],
ct_mm_cutoffs$best_kappa[2],
lasso_mice_cutoffs$best_kappa[2],
lasso_drop_cutoffs$best_kappa[2],
lasso_mm_cutoffs$best_kappa[2],
rf_mice_cutoffs$best_kappa[2],
rf_drop_cutoffs$best_kappa[2],
rf_mm_cutoffs$best_kappa[2])
models <- list("ClassTree",
"ClassTree",
"ClassTree",
"LassoRegres",
"LassoRegres",
"LassoRegres",
"RandomForest",
"RandomForest",
"RandomForest")
imputes <- list("MICE",
"NADropped",
"MeanMode",
"MICE",
"NADropped",
"MeanMode",
"MICE",
"NADropped",
"MeanMode")
results_table <- data.frame(Model = unlist(models),
Imputation = unlist(imputes),
Kappa = unlist(kappas),
Accuracy = unlist(accs),
CutoffVal = unlist(cutoffs),
TruePositive = unlist(tps),
TrueNegative = unlist(tns),
FalsePositive = unlist(fps),
FalseNegative = unlist(fns),
)
results_table <- data.frame(Model = unlist(models),
Imputation = unlist(imputes),
Kappa = unlist(kappas),
Accuracy = unlist(accs),
CutoffVal = unlist(cutoffs),
TruePositive = unlist(tps),
TrueNegative = unlist(tns),
FalsePositive = unlist(fps),
FalseNegative = unlist(fns))
results_table
results_table
save(results_table, file="ResultsTable.RData")
write.csv(results_table, "Results_table.csv", row.names = FALSE)
RF_MICE
